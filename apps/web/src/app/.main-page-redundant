 'use client';

import * as React from 'react';
// import { Spinner } from '@nextui-org/react';
import Image from 'next/image';
import { ProductCard } from '@/components/Dashboard/ProductCard';
import { CartItem } from '@/components/Dashboard/CartItem';
import { useRouter, useSearchParams } from 'next/navigation';
import { useEffect, useRef, useState } from 'react';
import { useDebounce } from 'use-debounce';
import { categoryList, productList } from '@/lib/product';
import { toastFailed } from './utils/toastHelper';
import { ICartItems, ICategories, IProductGet } from '@/types/productTypes';
import { Cart } from '@/components/Dashboard/Cart';
import { getCookie } from 'cookies-next';
import debounce from 'lodash.debounce';

export default function Home() {
  const router = useRouter();
  const toastSeeFailed = (message: string) => toastFailed(message);

  // Search state and query handling
  const searchParams = useSearchParams();
  const querySearch = searchParams.get('search');
  const queryCategory = searchParams.get('category');

  const searchRef = useRef<HTMLInputElement | null>(null);
  const [data, setData] = useState<IProductGet[] | null>(null);
  const [search, setSearch] = useState<string>(querySearch || '');
  const [category, setCategory] = useState<string>(queryCategory || '');

  // Set debounce value
  const [debouncedSearch] = useDebounce(search, 1000);
  const [debouncedCategory] = useDebounce(category, 1000);

  // Track if user has interacted with the inputs
  const [isSearchTouched, setIsSearchTouched] = useState(false);
  const [isCategoryTouched, setIsCategoryTouched] = useState(false);

  //  Handle Search Inputs activity
  const handleSearchChange = () => {
    if (searchRef.current) {
      setSearch(searchRef.current.value);
      setIsSearchTouched(true); // Mark search as touched
    }
  };
  const handleCategoryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setCategory(e.target.value);
    setIsCategoryTouched(true); // Mark category as touched
  };

  // Handle description html string
  // function createMarkup(c: string) {
  //   return { __html: c };
  // }

  // async function getToken() {
  //   return getCookie('cashewier-token');
  // }

  //   const getData = async () => {
  //     try {
  //       const token = await getToken();

  //       if (!token) throw 'Please Login Before Accessing Profile!';

  //       // Only push the query to the router if at least one input has been changed by the user
  //       if (isSearchTouched || isCategoryTouched) {
  //         const query = `?search=${debouncedSearch}&category=${debouncedCategory}
  // `;
  //         router.push(query);
  //       }

  //       // Fetch events based on the search parameters
  //       const { products } = await productList(
  //         debouncedSearch,
  //         debouncedCategory,
  //       );
  //       setData(products || []);
  //     } catch (err: any) {
  //       if (err === 'Please Login Before Accessing Profile!') {
  //         toastSeeFailed(`${err}`);

  //         router.push('/login');
  //       } else {
  //         toastSeeFailed(`${err}`);
  //       }
  //     }
  //   };

  // Trigger getData when debounced values change

  const getData = async () => {
    try {
      // Only push the query to the router if at least one input has been changed by the user
      if (isSearchTouched || isCategoryTouched) {
        const query = `?search=${debouncedSearch}&category=${debouncedCategory}`;
        router.push(query);
      }

      // Fetch events based on the search parameters
      const { products } = await productList(
        debouncedSearch,
        debouncedCategory,
      );
      setData(products || []);
    } catch (err: any) {
      toastSeeFailed(`${err}`);
    }
  };

  useEffect(
    () => {
      getData();
    },
    /*[debouncedSearch]*/ [debouncedSearch, debouncedCategory],
  );

  const [categories, setCategories] = useState<ICategories[] | null>(null);

  const getCategories = async () => {
    try {
      const { categories } = await categoryList();

      setCategories(categories);
    } catch (err: any) {
      toastSeeFailed(`${err}`);
    }
  };

  useEffect(() => {
    getCategories();
  }, []);

  const [carItems, setCartItems] = useState<ICartItems | null>(null)

  return (
    // bg-[#b9e1da]
    <div className="grid grid-cols-3 h-full bg-zinc-100 border-0">
      <div className="col-span-2 h-full flex flex-col gap-5">
        {/* Filter */}
        <div className="flex gap-5 p-5">
          <div className="flex">
            <label className="input input-bordered input-accent flex items-center gap-2">
              <input
                type="text"
                className="grow"
                placeholder="Search"
                onChange={handleSearchChange}
                ref={searchRef}
                defaultValue={debouncedSearch}
              />
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 16 16"
                fill="currentColor"
                className="h-4 w-4 opacity-70"
              >
                <path
                  fillRule="evenodd"
                  d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                  clipRule="evenodd"
                />
              </svg>
            </label>
          </div>
          <div className="flex">
            <select
              className="select select-accent w-full max-w-xs"
              onChange={handleCategoryChange}
              value={category}
            >
              <option value={''}>Category</option>
              {categories &&
                categories.map((cat) => (
                  <option key={cat.id} value={cat.id}>
                    {cat.categoryName}
                  </option>
                ))}
            </select>
          </div>
        </div>
        {/* Product List */}
        <div className="flex flex-row flex-wrap h-full justify-center gap-5 p-2 ">
          {data &&
            data.map((pro) => (
              <ProductCard
                key={pro.id}
                id={pro.id}
                name={pro.productName}
                image={pro.imageUrls}
                imgAlt={pro.productName}
                price={pro.price}
              />
            ))}
        </div>
      </div>

      {/* Cart */}
      <Cart />
    </div>
  );
}

/*

<div className="col-span-2 h-full flex flex-row flex-wrap justify-center gap-5 p-5 ">
        <ProductCard
          name="Coffee"
          image="https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp"
          imgAlt="coffee"
          price={10.99}
        /> 
        {data &&
          data.map((product) => (
            <ProductCard
              key={product.id}
              name={product.productName}
              image={product.imageUrls}
              imgAlt={product.productName}
              price={product.price}
            />
          ))}
      </div>

*/


















{
  /* <div>
  <input
    type="text"
    placeholder="Search"
    ref={searchRef}
    defaultValue={search}
    onChange={handleSearchChange}
  />
  <input
    type="text"
    placeholder="Category"
    defaultValue={category}
    onChange={handleCategoryChange}
  />
  <Cart /> */
}
{
  /* Render the data */
}
//   {data &&
//     data.map((product) => (
//       <div key={product.id}>
//         <h2>{product.name}</h2>
//         <p>{product.description}</p>
//       </div>
//     ))}
// </div>;
